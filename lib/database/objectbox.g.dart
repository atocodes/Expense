// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/item.dart';
import '../models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1740319503048471226),
      name: 'Item',
      lastPropertyId: const obx_int.IdUid(8, 1849373271121132284),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1463137079717028477),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 163934219429307329),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2877265473450838610),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5411584650679651936),
            name: 'quantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 908334633253646714),
            name: 'priority',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4164341782222223966),
            name: 'purchasedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5277950340716544229),
            name: 'purchased',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1849373271121132284),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 119913058186381578),
            relationTarget: 'User')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7843559435235917961),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(6, 7154568941562708965),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3544618334337092248),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 157871931798205972),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1033320619816925816),
            name: 'totalCash',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6866966258273063424),
            name: 'savingCash',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2282369597488479072),
            name: 'expenseCash',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7154568941562708965),
            name: 'pocketCash',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'items', srcEntity: 'Item', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 7843559435235917961),
      lastIndexId: const obx_int.IdUid(1, 119913058186381578),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1736320567931279762],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        602696199589774630,
        920756743339520094,
        4425831273803598331,
        6363139375243209489
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Item: obx_int.EntityDefinition<Item>(
        model: _entities[0],
        toOneRelations: (Item object) => [object.user],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.price);
          fbb.addInt64(3, object.quantity);
          fbb.addFloat64(4, object.priority);
          fbb.addInt64(5, object.purchasedDate?.millisecondsSinceEpoch);
          fbb.addBool(6, object.purchased);
          fbb.addInt64(7, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final purchasedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final purchasedDateParam = purchasedDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(purchasedDateValue);
          final quantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final priorityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = Item(
              name: nameParam,
              price: priceParam,
              purchasedDate: purchasedDateParam,
              quantity: quantityParam,
              priority: priorityParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..purchased =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.user.attach(store);
          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              obx_int.RelInfo<Item>.toOneBacklink(
                      8, object.id, (Item srcObject) => srcObject.user):
                  object.items
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.totalCash);
          fbb.addFloat64(3, object.savingCash);
          fbb.addFloat64(4, object.expenseCash);
          fbb.addFloat64(5, object.pocketCash);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = User(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..totalCash =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..savingCash =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..expenseCash =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..pocketCash =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          obx_int.InternalToManyAccess.setRelInfo<User>(
              object.items,
              store,
              obx_int.RelInfo<Item>.toOneBacklink(
                  8, object.id, (Item srcObject) => srcObject.user));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// See [Item.id].
  static final id = obx.QueryIntegerProperty<Item>(_entities[0].properties[0]);

  /// See [Item.name].
  static final name = obx.QueryStringProperty<Item>(_entities[0].properties[1]);

  /// See [Item.price].
  static final price =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[2]);

  /// See [Item.quantity].
  static final quantity =
      obx.QueryIntegerProperty<Item>(_entities[0].properties[3]);

  /// See [Item.priority].
  static final priority =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[4]);

  /// See [Item.purchasedDate].
  static final purchasedDate =
      obx.QueryDateProperty<Item>(_entities[0].properties[5]);

  /// See [Item.purchased].
  static final purchased =
      obx.QueryBooleanProperty<Item>(_entities[0].properties[6]);

  /// See [Item.user].
  static final user =
      obx.QueryRelationToOne<Item, User>(_entities[0].properties[7]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[1].properties[1]);

  /// See [User.totalCash].
  static final totalCash =
      obx.QueryDoubleProperty<User>(_entities[1].properties[2]);

  /// See [User.savingCash].
  static final savingCash =
      obx.QueryDoubleProperty<User>(_entities[1].properties[3]);

  /// See [User.expenseCash].
  static final expenseCash =
      obx.QueryDoubleProperty<User>(_entities[1].properties[4]);

  /// See [User.pocketCash].
  static final pocketCash =
      obx.QueryDoubleProperty<User>(_entities[1].properties[5]);

  /// see [User.items]
  static final items = obx.QueryBacklinkToMany<Item, User>(Item_.user);
}
